#!/usr/bin/env python

#import time
import os, sys
from flask import Flask, abort, request ,render_template, make_response
import json
#import redis
import urlparse
import requests
import urllib2
import pytz
import datetime
from random import random

from time import time
#from random import random
#from flask import Flask, render_template, make_response



path = os.path.join('.', os.path.dirname(__file__), '../')
sys.path.append(path)

from flask import Flask, g, render_template
import flask_sijax

app = Flask(__name__)

# The path where you want the extension to create the needed javascript files
# DON'T put any of your files in this directory, because they'll be deleted!
app.config["SIJAX_STATIC_PATH"] = os.path.join('.', os.path.dirname(__file__), 'static/js/sijax/')

# You need to point Sijax to the json2.js library if you want to support
# browsers that don't support JSON natively (like IE <= 7)
app.config["SIJAX_JSON_URI"] = '/static/js/sijax/json2.js'

flask_sijax.Sijax(app)

#rediscloud_service = json.loads(os.environ['VCAP_SERVICES'])['p-redis'][0]
#credentials = rediscloud_service['credentials']
#r = redis.Redis(host=credentials['host'], port=credentials['port'], password=credentials['password'])

def checkWeather():
	f = urllib2.urlopen('http://api.wunderground.com/api/569f4057fcdc5f4c/geolookup/conditions/q/Singapore/Singapore.json')
	json_string = f.read()
	parsed_json = json.loads(json_string)
	location = parsed_json['location']['city']
	temp_c = parsed_json['current_observation']['temp_c']
	#print json.dumps(parsed_json, sort_keys=True, indent=4)
	message= "Current Outdoor temperature in "+location+" is: " + str(temp_c)
	UV = parsed_json['current_observation']['UV']
	print "UV:" + UV
	message = message + "<br>"+ "UV: "+ UV
	icon= parsed_json['current_observation']['icon']
	print icon
	message = message + "<br>" + icon
	icon_url= parsed_json['current_observation']['icon_url']
	print icon_url
	relative_humidity= parsed_json['current_observation']['relative_humidity']
	print "Relative Humidity:" + relative_humidity
	message = message + "<br>" + "Relative Humidity: " + str(relative_humidity)

	f.close()
	#r.set('weathermessage',message)
	#r.set('iconurl',icon_url)
	

def comet_do_work_handler(obj_response):
    wtimer=2
	#int(r.get('weathertimer'))
    print "wtimer:" + str(wtimer)
    if wtimer==1:
        checkWeather()
        wtimer=wtimer+1
    elif wtimer==6:        
        wtimer=1
    else:
        wtimer=wtimer+1
        
    #r.set('weathertimer',str(wtimer))

        #width = '%spx' % (i * 80)
        #obj_response.css('#progress', 'width', width)
    #obj_response.html('#timevalue', 'Time:'+str(r.get('timevalue')))
    #obj_response.html('#lightvalue', 'Light:'+str(r.get('lightvalue')))
    #obj_response.html('#tempvalue', 'Temperature:'+str(r.get('tempvalue')))
    #obj_response.html('#moisvalue', 'Soil Moisture:'+str(r.get('moisvalue')))	
    obj_response.html('#weathervalue', 'Testing')
    #obj_response.html('#weathericon', str(r.get('iconurl')))
    # Yielding tells Sijax to flush the data to the browser.
    # This only works for Streaming functions (Comet or Upload)
    # and would not work for normal Sijax functions
    yield obj_response

        
def comet_do_switchLed_handler(obj_response):
    # defining the api-endpoint 

	API_EndPointLED = "http://10.36.67.144:5000/led?switch="
	result = requests.post(API_EndPointLED)

def comet_do_switchFan_handler(obj_response):
    # defining the api-endpoint 

	API_EndPointLED = "http://10.36.67.144:5000/fan?switch="
	result = requests.post(API_EndPointLED)

#@flask_sijax.route(app, "/live-data")
@app.route('/live-data', methods=['GET'])
def live_data():
    # Create a PHP array and echo it as JSON
    utc_now = pytz.utc.localize(datetime.datetime.utcnow())
    pst_now = utc_now.astimezone(pytz.timezone("Asia/Singapore"))
    epoch2 = datetime.datetime(1970,1,1, tzinfo=pytz.timezone("Asia/Singapore"))
    ts = (pst_now - epoch2).total_seconds()

    data=[ts*1000,random() * 100]
	
    #data = [time() * 1000, random() * 100]
    print "live-data:" + str(data)
    response = make_response(json.dumps(data))
    response.content_type = 'application/json'
    return response

@flask_sijax.route(app, "/")
def index():
    if g.sijax.is_sijax_request:
        # The request looks like a valid Sijax request
        # Let's register the handlers and tell Sijax to process it
        g.sijax.register_comet_callback('do_work', comet_do_work_handler)
        g.sijax.register_comet_callback('do_switchLed', comet_do_switchLed_handler)
        g.sijax.register_comet_callback('do_switchFan', comet_do_switchFan_handler)
        return g.sijax.process_request()
    
    #return render_template('index.html', data='test')
    return render_template('index.html')

@app.route('/sensors', methods=['POST']) 
def sensors():
    sensors = request.args.get("sensors")
    sensorslist=sensors.split(",")
   
    #+ " light:" + r.get('lightvalue')
    return "sensors:" + str(sensors)



if __name__ == "__main__":

	app.run(debug=False,host='0.0.0.0', port=int(os.getenv('PORT', '5000')))
    
